// set up a simple neutral simulation
initialize() {
	initializeMutationRate(1e-7);
	
	// m1 mutation type: liabillity increasing 
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	//QUESTION: SHOULD I HAVE PROTECTIVE MUTATIONS
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	m1.convertToSubstitution=T;
	

	// uniform chromosome of length 100 kb with uniform recombination
	initializeGenomicElement(g1, 0, L);
	initializeRecombinationRate(1e-5);

	defineConstant("L",100);
	defineConstant("selec",0.3); //fitness cost of disease
	defineConstant("h2", 0.5); //heritability
	defineConstant("init_pop", 5000);//initial population size
	defineConstant("mu", (1e-7)); //mutations per base position
	defineConstant("rho", 0); //percent of protective mutations
	defineConstant("gamma", log(rho / (1-rho)));
	defineConstant("s", gamma/ (4 * init_pop));
	defineConstant("stdev", sqrt(4* L * mu/s * (exp(gamma)-1)/(exp(gamma)+1)));
	defineConstant("equilibrium", L *((4 * init_pop * mu) / ((4 * init_pop * mu) + 1)));
	
}


// create a population of 500 individuals
1 {
	if (status == 1) {
		sim.addSubpop("p1", init_pop);
		sim.tag = F;
		defineConstant("out_final", asString(L) + "_final.txt");
	} else {
		sim.readFromPopulationFile(model);
		sim.tag = T;
	}
	

}


1:late() {
	//
	if (status == 1) {
		// sum the additive effects of QTLs
		inds = sim.subpopulations.individuals;
	
   	genLi = asFloat(inds.countOfMutationsOfType(m1) + sum(sim.substitutions.mutationType == m1));
   	V_A = var(genLi);
   	inds.tagF = genLi;
	
			
		//if the thresold has not been turned on 
		if (!sim.tag) {
		
			//if it has reached 95% of equilibirum genetic liability, turn on the threshold
			if (V_A >= (equilibrium * 0.95)) {
		
				print(paste("reached equilibrium at generation " + asString(sim.generation)));
		
				//calculate the threshold value
				t = 2 * (max(inds.tagF) - mean(inds.tagF));
				defineConstant("thres", t);
				defineConstant("thresOnGen" , sim.generation);
				sim.tag = T;
				print(paste("threshold set to " + thres));
			
				//output the population state
				defineConstant("model", ("model_output_" + asString(L) + ".txt"));
				sim.outputFull(model);
			
				defineConstant("out", asString(L) + "_info.txt");
			}
	
		//if not, then the threshold is turned on
		} else {
		
			//CALCULATE SEG SITES
			seg_sites = size(unique(sim.subpopulations.genomes.mutations));
		
			//OUTPUT GENETIC VARIANCE, MEAN LIAB, NUM SEG SITES
			writeFile(out, paste(V_A + " " + mean(inds.tagF)+ " " + seg_sites + " " + thres), append=T);

		}
	}
	else {
		// sum the additive effects of QTLs
		inds = sim.subpopulations.individuals;
	
   	genLi = asFloat(inds.countOfMutationsOfType(m1) + sum(sim.substitutions.mutationType == m1));
   	envLi = rnorm(size(inds), 0.0, sqrt(envVar));
   	V_A = var(genLi);
   	V_E = var(envLi);
   	inds.tagF = genLi + envLi;
   	
   	seg_sites = size(unique(sim.subpopulations.genomes.mutations));
   	writeFile(out_final, paste(V_A + " " + V_E + " " + mean(inds.tagF)+ " " + seg_sites), append=T);

		
	}
} 

fitness(NULL){
	
	//if the threshold has been turned on, add the fitness cost of disease if an individual is past the threshold
	if (sim.tag) {
	
		return 1.0 - selec * asFloat(individual.tagF>thres);
		
	} else {
	
		return 1.0;
		
	}
}


//End simulation at generation 70000
200000 {
	sim.simulationFinished();
}