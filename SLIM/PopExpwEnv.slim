

initialize(){
	initializeMutationRate(1e-7);
	
	//Neutral Mutation m1 with dominance coefficient 0.5, fixed fitness
	initializeMutationType("m1",0.5,"f",0);
	
	//Initialize the particular TYPE of chromosomal region of interest (intron exon 		UTI etc
	initializeGenomicElementType("g1",m1,1.0);
	
	//initialize the specific region of the genetic element defined above
	initializeGenomicElement(g1, 0, 99999);
	
	//initialize the probability of crossover
	initializeRecombinationRate(1e-6);
	m1.convertToSubstitution=F;
	defineConstant("thres",7);
	defineConstant("selec",0.3);
	defineConstant("h2", 0.1);

}


//Eidos event for generation 1 that will create a new subpopulation of 500 individuals named p1


1 {sim.addSubpop("p1", 500);}




//If an individual has more mutations than the threshold, assign fitness value of 1-selection coefficient

late(){
	inds = sim.subpopulations.individuals;
	inds.tag = inds.countOfMutationsOfType(m1);
	gen=sim.generation;
	mut=sim.mutations;
	count=  p1.individuals.countOfMutationsOfType(m1);
	inds.tagF = inds.countOfMutationsOfType(m1);

}




10000{
	p1.setSubpopulationSize(5000);
}

//End simulation at generation 20000

11000 {sim.simulationFinished();}

1: late() {
// sum the additive effects of QTLs
 inds = sim.subpopulations.individuals;
 additive = inds.countOfMutationsOfType(m1);
// add in environmental variance, according to the target heritability
 V_A = sd(additive)^2;
 V_E = (V_A - h2 * V_A) / h2; // from h2 == V_A / (V_A + V_E)
 env = rnorm(size(inds), 0.0, sqrt(V_E));
// set fitness effects and remember phenotypes
 inds.tagF = additive + env;
 catn(sim.generation + " : " + paste(inds.tagF));
} 

fitness(NULL){
	return 1.0- selec* asFloat(individual.tagF>thres);
}

10000{
	p1.setSubpopulationSize(5000);
}

//End simulation at generation 20000

11000 {sim.simulationFinished();}


late(){ 
inds = sim.subpopulations.individuals;
catn(sim.generation + " : " + paste(inds.countOfMutationsOfType(m1)));
}
