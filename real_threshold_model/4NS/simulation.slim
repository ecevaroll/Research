initialize(){
	initializeMutationRate(1e-7);
	
	//Neutral Mutation m1 Beneficial Mutation m2
	initializeMutationType("m1",0.5,"f",0);
	initializeMutationType("m2",0.5,"f",0);
	
	//Initialize the particular TYPE of chromosomal region of interest (intron exon 		UTI etc
	initializeGenomicElementType("g1",c(m1,m2),c((1-rho),rho));
	
	//initialize the specific region of the genetic element defined above
	defineConstant("L", 99999); //number of sites
	initializeGenomicElement(g1, 0, L);
	
	//initialize the probability of crossover
	initializeRecombinationRate(1e-4);
	m1.convertToSubstitution=T;
	m2.convertToSubstitution=T;
	defineConstant("thres",(rho* 2*L)); //liability threshold
	defineConstant("selec",0.3); //fitness cost of disease
	defineConstant("h2", 0.5); //heritability
	defineConstant("init_pop", 500);//initial population size
	defineConstant("mu", (1e-7)); //mutations per base position per generation
	defineConstant("gamma", log((1-rho)/ rho));
	defineConstant("s", gamma/ (4 * init_pop));
	defineConstant("envVar", sqrt(2 * L * mu/s * (exp(gamma)- 1)/(exp(gamma)+1)*(1-h2)/h2));
	defineConstant("stdev", sqrt(4* L * mu/s * (exp(gamma)-1)/(exp(gamma)+1)));
	
}


//Eidos event for generation 1 that will create a new subpopulation of 500 individuals named p1


1 {
	sim.addSubpop("p1", init_pop);
	file = paste(rho + " " + getSeed());
	writeFile("seed.txt", file, append=T);
}


20000 {
	p1.setSubpopulationSize(5000);
}



1:late() {
	
// sum the additive effects of QTLs
	inds = sim.subpopulations.individuals;
        posGenLi = asFloat(inds.countOfMutationsOfType(m1) + 
          sum(sim.substitutions.mutationType == m1));
        negGenLi = inds.countOfMutationsOfType(m2) +	       
          sum(sim.substitutions.mutationType == m2);
	genLi =  (thres- (6*stdev)) + (posGenLi - negGenLi);
	
// add in environmental variance, according to the target heritability
	env = rnorm(size(inds), 0.0, envVar);
        liability = genLi + env;
        inds.tagF = liability;


        V_A = var(genLi);
        V_E = var(inds.tagF);
        prev = sum(inds.tagF > thres)/size(inds);
        risk = (sum(inds.tagF > (thres - 1))/size(inds)) - prev ;
        
    prevLine = paste(sim.generation + " " + prev + " " + risk);
	writeFile(prev_name, prevLine, append=T);
	
	varLine = paste(sim.generation + " " + V_A + " " + (V_A/(V_A + V_E)));
	writeFile(var_name, varLine, append=T);
	
}

fitness(m1){
	return 1.0;
}
fitness(m2){
	return 1.0;
}

fitness(NULL){
	return 1.0 - selec * asFloat(individual.tagF>thres);
}

//End simulation at generation 40000
40000 {
	sim.simulationFinished();
}
